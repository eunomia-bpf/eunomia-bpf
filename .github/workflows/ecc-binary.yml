name: Build and release standalone binary of ecc

on:
    workflow_dispatch: 
    push:
      branches: ["*"]
      paths:
        - "ecli/**"
        - "compiler/**"  # Ensure ecc and ecli releasing at same time
        - "wasm-rumtime/**"  # Release when dependencies updated
        - "third_party/**"
        - "bpf-loader-rs/**"
        - "eunomia-sdk/**"
        - ".github/**"
  
    pull_request:
      branches: ["*"]
      paths:
        - "ecli/**"
        - "compiler/**"
        - "wasm-rumtime/**"
        - "third_party/**"
        - "bpf-loader-rs/**"
        - "eunomia-sdk/**"
        - ".github/**" 
env:
  BUILD_TYPE: Release
  INSTALL_LOCATION: .local
  GITHUB_REPO_OWNER: ${{ github.repository_owner }}
    
jobs:
  create-release-version:
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.set_version.outputs.result}}
    steps:
      - name: Set latest release version
        id: set_version
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            if (releases.length === 0) { return "v0.0.1"; }
            
            function increase_v(version) {
              const parts = version.split(".");
              const last = parseInt(parts[2]) + 1;
              const next_version = `${parts[0]}.${parts[1]}.${last.toString()}`;
              return next_version;
            }
            
            const latest_release_tag = releases[0].tag_name;
            
            const tag = tags.find(tag => tag.commit.sha === context.sha);
            
            return tag ? tag.name : increase_v(latest_release_tag)
  build-ecc-binary:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: aarch64
            vmlinux_dir: arm64
            rust_target: aarch64-unknown-linux-gnu
            linker_specifier: CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            appimage_runtime: https://github.com/eunomia-bpf/prepare-cargo-appimage/raw/v6/runtime-aarch64
            is_cross: true
            cross_compiler_package: gcc-aarch64-linux-gnu
            cross_compiler_executable: aarch64-linux-gnu-gcc
          - name: x86_64
            vmlinux_dir: x86
            rust_target: x86_64-unknown-linux-gnu
            linker_specifier: 
            appimage_runtime: https://github.com/eunomia-bpf/prepare-cargo-appimage/raw/v6/runtime-x86_64
            is_cross: false
    name: Build ecc on ${{matrix.platform.name}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install dependencies for cross building
        if: matrix.platform.is_cross
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{matrix.platform.cross_compiler_package}}
          ${{matrix.platform.cross_compiler_executable}} --version
      - name: Prepare bpftool and vmlinux repo for building workspace
        # Move more steps outside of the virtual machine
        run: |
          mkdir workspace
          mkdir assets
          cd assets
          git clone --recursive https://github.com/eunomia-bpf/vmlinux
          cd vmlinux
          git checkout 933f83b
          # Avoid symlink issues
          rm vmlinux.h
          cd ..
          git clone --recursive https://github.com/eunomia-bpf/bpftool
          cd bpftool
          # git checkout 0594034
      - name: Build workspace in docker
        uses: addnab/docker-run-action@v3
        if: "!matrix.platform.is_cross"
        with:
          image: ubuntu:22.04
          run: |
            apt-get update
            apt-get install -y zlib1g-dev libelf-dev gcc make
            cd /workspace && mkdir bin
            cd /assets/bpftool/src
            CFLAGS="-static" make
            cp bpftool /workspace/bin
          options: |
            --volume ${{github.workspace}}/workspace:/workspace
            --volume ${{github.workspace}}/assets:/assets
      - name: Build workspace in ${{matrix.platform.name}} virtual machine
        uses: uraimo/run-on-arch-action@v2
        if: matrix.platform.is_cross
        with: 
          arch: ${{matrix.platform.name}}
          distro: ubuntu22.04
          run: |
            apt-get update
            apt-get install -y zlib1g-dev libelf-dev gcc make
            cd /workspace && mkdir bin
            cd /assets/bpftool/src
            CFLAGS="-static" make
            cp bpftool /workspace/bin
          dockerRunArgs: |
            --volume "${PWD}/workspace:/workspace"
            --volume "${PWD}/assets:/assets"
      - name: Compose the ecc workspace
        run: |
          sudo chmod 777 workspace -R
          sudo chown `whoami` workspace -R
          cd workspace
          mkdir include
          cp -r ../assets/bpftool/src/libbpf/include/bpf include/
          cp -r ../assets/vmlinux/ include/
          cp ./include/vmlinux/${{matrix.platform.vmlinux_dir}}/vmlinux.h ./include/vmlinux
      - name: Build ecc for ${{matrix.platform.rust_target}}
        run: |
          rustup target add ${{matrix.platform.rust_target}}
          export ECC_CUSTOM_WORKSPACE_ROOT=$(pwd)/workspace
          echo "Workspace dir: $ECC_CUSTOM_WORKSPACE_ROOT"
          cd compiler/cmd
          cargo build --release --target ${{matrix.platform.rust_target}}
          cd ../..
          mkdir data
          cp ./compiler/cmd/target/${{matrix.platform.rust_target}}/release/ecc-rs data/ecc
          cp ./.github/scripts/copy-libs.sh ./data
          ls -lah data
      # Necessary if we want to run things cross platform
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Run ecc-rs and retrive what libraries it loaded (cross)
        uses: uraimo/run-on-arch-action@v2
        if: matrix.platform.is_cross
        with: 
          arch: ${{matrix.platform.name}}
          distro: ubuntu22.04
          run: |
            apt-get update
            apt-get install -y libclang1
            echo "Installation done"
            echo "Working directory $(pwd)"
            chmod +x /data/ecc
            echo "Permission set done"
            chmod +x /data/copy-libs.sh
            /data/copy-libs.sh /data/ecc
          dockerRunArgs: |
            --volume "${PWD}/data:/data"
          shell: /bin/bash
      - name: Run ecc-rs and retrive what libraries it loaded (native)
        uses: addnab/docker-run-action@v3
        if: "!matrix.platform.is_cross"
        with: 
          image: ubuntu:22.04
          run: |
            apt-get update
            apt-get install -y libclang1
            echo "Installation done"
            echo "Working directory $(pwd)"
            chmod +x /data/ecc
            echo "Permission set done"
            chmod +x /data/copy-libs.sh
            /data/copy-libs.sh /data/ecc
          options: |
            --volume ${{github.workspace}}/data:/data
      - name: Show what libraries were copied
        run: |
          sudo chmod 777 ./data -R
          sudo chown $(whoami) ./data -R
          find ./data/libs -type f
      - name: Prepare runtime file and cargo-appimage tool
        uses: eunomia-bpf/prepare-cargo-appimage@v6
        with: 
          runtime-url: ${{matrix.platform.appimage_runtime}}
      - name: Install libfuse for appimagetool
        run: |
          sudo apt-get update
          sudo apt-get install libfuse2
      - name: Clone and install cargo-appimage with ${{matrix.platform.name}} launcher
        run: |
          git clone https://github.com/eunomia-bpf/cargo-appimage
          cd cargo-appimage
          ${{matrix.platform.linker_specifier}} RUSTFLAGS="-C target-feature=+crt-static" cargo build --release --target ${{matrix.platform.rust_target}}
      - name: Compose files and pack them
        run: |
          mkdir appimage-root
          cd appimage-root
          cp -r ../data/libs/* .
          mkdir -p usr/bin
          cp ../data/ecc usr/bin/bin
          touch icon.png
          cp ../cargo-appimage/target/${{matrix.platform.rust_target}}/release/cargo-appimage-runner AppRun
          cp ../.github/scripts/cargo-appimage.desktop .
          ../appimagetool --runtime-file ../runtime . ../ecc-${{matrix.platform.name}}
      - uses: actions/upload-artifact@v3
        name: Upload build result
        with:
          name: ecc-${{matrix.platform.name}}
          path: ecc-${{matrix.platform.name}}
      - if: matrix.platform.is_cross
        # qemu-user doesn't seem to handle statically linked binaries well
        continue-on-error: true
        name: Test the binary in a new environment (cross)
        uses: uraimo/run-on-arch-action@v2
        with: 
          arch: ${{matrix.platform.name}}
          distro: ubuntu18.04
          run: |
            apt-get update
            apt-get install -y clang llvm-9
            cd /data
            chmod +x ecc-${{matrix.platform.name}}
            ./ecc-${{matrix.platform.name}} -l llvm-strip-9 .github/assets/simple.bpf.c
          dockerRunArgs: |
            --volume "${PWD}:/data" --privileged
      - name: Test the binary in a new environment (native)
        uses: addnab/docker-run-action@v3
        if: "!matrix.platform.is_cross"
        with:
          image: ubuntu:18.04
          run: |
            apt-get update
            apt-get install -y clang llvm-9
            cd /data
            chmod +x ecc-${{matrix.platform.name}}
            ./ecc-${{matrix.platform.name}} -l llvm-strip-9 .github/assets/simple.bpf.c
          options: |
            --volume ${{github.workspace}}:/data --privileged

  release:
    needs: [create-release-version, build-ecc-binary]
    runs-on: ubuntu-latest
    steps:
      - name: Download build results
        uses: actions/download-artifact@v3
        with:
          path: results
      - name: List build results
        run: |
          find ./results -type f
      - name: Copy ecc binary x86_64 to ecc
        run: |
          cp ./results/ecc-x86_64/ecc-x86_64 ./results/ecc-x86_64/ecc
      - name: Publish
        if:   github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository_owner == 'eunomia-bpf'
        uses: softprops/action-gh-release@v1
        with:
            files: |
              ./results/ecc-x86_64/ecc
              ./results/ecc-x86_64/ecc-x86_64
              ./results/ecc-aarch64/ecc-aarch64
            prerelease: false
            tag_name: ${{ needs.create-release-version.outputs.version }}
            generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    