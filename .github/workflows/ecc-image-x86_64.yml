name: Build and publish ecc docker image (x86_64)

on:
  workflow_dispatch: 
  push:
    branches: "master"
env:
  GITHUB_REPO_OWNER: ${{ github.repository_owner }}
jobs:
  # define job to build and publish docker image
  build-and-push-ecc-image:
    runs-on: ubuntu-latest
    # run only when code is compiling and tests are passing
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    # steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      # setup Docker buld action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: downcase REPO
        run: |
          echo "REPO_OWNER=${GITHUB_REPO_OWNER,,}" >>${GITHUB_ENV}
      - name: use REPO
        run: |
          echo "The value of REPO_OWNER is: ${REPO_OWNER}"
      - name: Build ecc-x86_64 image and push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./
          file: ./compiler/dockerfile
          platforms: linux/amd64
          # Note: tags has to be all lower-case
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/ecc-x86_64:latest
          push: true
      - name: Test the docker image (x86_64)
        run: |
          sudo apt-get update
          sudo apt-get remove moby-containerd moby-runc containerd.io
          sudo apt-get install -y docker.io
          mkdir docker-test
          cd docker-test
          cp ../.github/assets/simple.bpf.c .
          docker run -v `pwd`/:/src/ ghcr.io/${{ env.REPO_OWNER }}/ecc-x86_64:latest
          if [[ ! -f "./package.json" ]]
          then
            echo "Docker image failed to produce package.json"
            exit 1
          fi
          
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
