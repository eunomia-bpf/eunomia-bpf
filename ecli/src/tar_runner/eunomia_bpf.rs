/* automatically generated by rust-bindgen 0.60.1 */

pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    fn test_field___clang_max_align_nonce1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce1)
            )
        );
    }
    test_field___clang_max_align_nonce1();
    fn test_field___clang_max_align_nonce2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce2)
            )
        );
    }
    test_field___clang_max_align_nonce2();
}
pub const export_format_type_EXPORT_PLANT_TEXT: export_format_type = 0;
pub const export_format_type_EXPORT_JSON: export_format_type = 1;
pub const export_format_type_EXPORT_RAW_EVENT: export_format_type = 2;
pub type export_format_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eunomia_bpf {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " create a new eunomia bpf program from a json file"]
    pub fn open_eunomia_skel_from_json(
        json_data: *const ::std::os::raw::c_char,
        bpf_object_buffer: *const ::std::os::raw::c_char,
        object_size: size_t,
    ) -> *mut eunomia_bpf;
}
extern "C" {
    #[doc = " create a new eunomia bpf program from a json file"]
    pub fn open_eunomia_skel_from_json_package(
        json_data: *const ::std::os::raw::c_char,
    ) -> *mut eunomia_bpf;
}
extern "C" {
    pub fn open_eunomia_skel_from_json_package_with_args(
        json_data: *const ::std::os::raw::c_char,
        args: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
    ) -> *mut eunomia_bpf;
}
extern "C" {
    #[doc = " @brief start running the ebpf program"]
    #[doc = " @details load and attach the ebpf program to the kernel to run the ebpf"]
    #[doc = " program if the ebpf program has maps to export to user space, you need to"]
    #[doc = " call the wait and export."]
    pub fn load_and_attach_eunomia_skel(prog: *mut eunomia_bpf) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief wait for the program to exit and receive data from export maps and"]
    #[doc = " send to handlers"]
    #[doc = " @details if the program has a ring buffer or perf event to export data"]
    #[doc = " to user space, the program will help load the map info and poll the"]
    #[doc = " events automatically."]
    pub fn wait_and_poll_events_to_handler(
        prog: *mut eunomia_bpf,
        type_: export_format_type,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                size: size_t,
            ),
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief stop, detach, and free the memory"]
    #[doc = " @warning this function will free the memory of the program"]
    #[doc = " it's not reenter-able, and you should not use the program after this"]
    #[doc = " function."]
    pub fn destroy_eunomia_skel(prog: *mut eunomia_bpf);
}
extern "C" {
    #[doc = " @brief get fd of ebpf program or map by name"]
    pub fn get_bpf_fd(
        prog: *mut eunomia_bpf,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief stop, detach, but not clean the memory"]
    pub fn stop_ebpf_program(prog: *mut eunomia_bpf);
}
extern "C" {
    #[doc = " @brief free the memory of the program"]
    pub fn free_bpf_skel(prog: *mut eunomia_bpf);
}
extern "C" {
    #[doc = " @brief merge json config and args and return the new config"]
    pub fn parse_args_to_json_config(
        json_config: *const ::std::os::raw::c_char,
        args: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        out_buffer: *mut ::std::os::raw::c_char,
        out_buffer_size: size_t,
    ) -> ::std::os::raw::c_int;
}
